/**
 * @fileoverview gRPC-Web generated client stub for donaciones
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v2.0.2
// 	protoc              v6.32.0
// source: donaciones.proto


/* eslint-disable */
// @ts-nocheck



const grpc = {};
grpc.web = require('grpc-web');

const proto = {};
proto.donaciones = require('./donaciones_pb.js');

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.donaciones.DonacionesServiceClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.donaciones.DonacionesServicePromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.donaciones.SolicitudDonacionRequest,
 *   !proto.donaciones.Respuesta>}
 */
const methodDescriptor_DonacionesService_EnviarSolicitud = new grpc.web.MethodDescriptor(
  '/donaciones.DonacionesService/EnviarSolicitud',
  grpc.web.MethodType.UNARY,
  proto.donaciones.SolicitudDonacionRequest,
  proto.donaciones.Respuesta,
  /**
   * @param {!proto.donaciones.SolicitudDonacionRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.donaciones.Respuesta.deserializeBinary
);


/**
 * @param {!proto.donaciones.SolicitudDonacionRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.donaciones.Respuesta)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.donaciones.Respuesta>|undefined}
 *     The XHR Node Readable Stream
 */
proto.donaciones.DonacionesServiceClient.prototype.enviarSolicitud =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/donaciones.DonacionesService/EnviarSolicitud',
      request,
      metadata || {},
      methodDescriptor_DonacionesService_EnviarSolicitud,
      callback);
};


/**
 * @param {!proto.donaciones.SolicitudDonacionRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.donaciones.Respuesta>}
 *     Promise that resolves to the response
 */
proto.donaciones.DonacionesServicePromiseClient.prototype.enviarSolicitud =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/donaciones.DonacionesService/EnviarSolicitud',
      request,
      metadata || {},
      methodDescriptor_DonacionesService_EnviarSolicitud);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.donaciones.Vacio,
 *   !proto.donaciones.ListaSolicitudesResponse>}
 */
const methodDescriptor_DonacionesService_ListarSolicitudes = new grpc.web.MethodDescriptor(
  '/donaciones.DonacionesService/ListarSolicitudes',
  grpc.web.MethodType.UNARY,
  proto.donaciones.Vacio,
  proto.donaciones.ListaSolicitudesResponse,
  /**
   * @param {!proto.donaciones.Vacio} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.donaciones.ListaSolicitudesResponse.deserializeBinary
);


/**
 * @param {!proto.donaciones.Vacio} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.donaciones.ListaSolicitudesResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.donaciones.ListaSolicitudesResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.donaciones.DonacionesServiceClient.prototype.listarSolicitudes =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/donaciones.DonacionesService/ListarSolicitudes',
      request,
      metadata || {},
      methodDescriptor_DonacionesService_ListarSolicitudes,
      callback);
};


/**
 * @param {!proto.donaciones.Vacio} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.donaciones.ListaSolicitudesResponse>}
 *     Promise that resolves to the response
 */
proto.donaciones.DonacionesServicePromiseClient.prototype.listarSolicitudes =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/donaciones.DonacionesService/ListarSolicitudes',
      request,
      metadata || {},
      methodDescriptor_DonacionesService_ListarSolicitudes);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.donaciones.OfertaDonacionRequest,
 *   !proto.donaciones.Respuesta>}
 */
const methodDescriptor_DonacionesService_EnviarOferta = new grpc.web.MethodDescriptor(
  '/donaciones.DonacionesService/EnviarOferta',
  grpc.web.MethodType.UNARY,
  proto.donaciones.OfertaDonacionRequest,
  proto.donaciones.Respuesta,
  /**
   * @param {!proto.donaciones.OfertaDonacionRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.donaciones.Respuesta.deserializeBinary
);


/**
 * @param {!proto.donaciones.OfertaDonacionRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.donaciones.Respuesta)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.donaciones.Respuesta>|undefined}
 *     The XHR Node Readable Stream
 */
proto.donaciones.DonacionesServiceClient.prototype.enviarOferta =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/donaciones.DonacionesService/EnviarOferta',
      request,
      metadata || {},
      methodDescriptor_DonacionesService_EnviarOferta,
      callback);
};


/**
 * @param {!proto.donaciones.OfertaDonacionRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.donaciones.Respuesta>}
 *     Promise that resolves to the response
 */
proto.donaciones.DonacionesServicePromiseClient.prototype.enviarOferta =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/donaciones.DonacionesService/EnviarOferta',
      request,
      metadata || {},
      methodDescriptor_DonacionesService_EnviarOferta);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.donaciones.Vacio,
 *   !proto.donaciones.ListaOfertasResponse>}
 */
const methodDescriptor_DonacionesService_ListarOfertas = new grpc.web.MethodDescriptor(
  '/donaciones.DonacionesService/ListarOfertas',
  grpc.web.MethodType.UNARY,
  proto.donaciones.Vacio,
  proto.donaciones.ListaOfertasResponse,
  /**
   * @param {!proto.donaciones.Vacio} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.donaciones.ListaOfertasResponse.deserializeBinary
);


/**
 * @param {!proto.donaciones.Vacio} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.donaciones.ListaOfertasResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.donaciones.ListaOfertasResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.donaciones.DonacionesServiceClient.prototype.listarOfertas =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/donaciones.DonacionesService/ListarOfertas',
      request,
      metadata || {},
      methodDescriptor_DonacionesService_ListarOfertas,
      callback);
};


/**
 * @param {!proto.donaciones.Vacio} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.donaciones.ListaOfertasResponse>}
 *     Promise that resolves to the response
 */
proto.donaciones.DonacionesServicePromiseClient.prototype.listarOfertas =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/donaciones.DonacionesService/ListarOfertas',
      request,
      metadata || {},
      methodDescriptor_DonacionesService_ListarOfertas);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.donaciones.TransferenciaDonacionRequest,
 *   !proto.donaciones.Respuesta>}
 */
const methodDescriptor_DonacionesService_EnviarTransferencia = new grpc.web.MethodDescriptor(
  '/donaciones.DonacionesService/EnviarTransferencia',
  grpc.web.MethodType.UNARY,
  proto.donaciones.TransferenciaDonacionRequest,
  proto.donaciones.Respuesta,
  /**
   * @param {!proto.donaciones.TransferenciaDonacionRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.donaciones.Respuesta.deserializeBinary
);


/**
 * @param {!proto.donaciones.TransferenciaDonacionRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.donaciones.Respuesta)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.donaciones.Respuesta>|undefined}
 *     The XHR Node Readable Stream
 */
proto.donaciones.DonacionesServiceClient.prototype.enviarTransferencia =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/donaciones.DonacionesService/EnviarTransferencia',
      request,
      metadata || {},
      methodDescriptor_DonacionesService_EnviarTransferencia,
      callback);
};


/**
 * @param {!proto.donaciones.TransferenciaDonacionRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.donaciones.Respuesta>}
 *     Promise that resolves to the response
 */
proto.donaciones.DonacionesServicePromiseClient.prototype.enviarTransferencia =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/donaciones.DonacionesService/EnviarTransferencia',
      request,
      metadata || {},
      methodDescriptor_DonacionesService_EnviarTransferencia);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.donaciones.BajaSolicitudRequest,
 *   !proto.donaciones.Respuesta>}
 */
const methodDescriptor_DonacionesService_BajaSolicitud = new grpc.web.MethodDescriptor(
  '/donaciones.DonacionesService/BajaSolicitud',
  grpc.web.MethodType.UNARY,
  proto.donaciones.BajaSolicitudRequest,
  proto.donaciones.Respuesta,
  /**
   * @param {!proto.donaciones.BajaSolicitudRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.donaciones.Respuesta.deserializeBinary
);


/**
 * @param {!proto.donaciones.BajaSolicitudRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.donaciones.Respuesta)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.donaciones.Respuesta>|undefined}
 *     The XHR Node Readable Stream
 */
proto.donaciones.DonacionesServiceClient.prototype.bajaSolicitud =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/donaciones.DonacionesService/BajaSolicitud',
      request,
      metadata || {},
      methodDescriptor_DonacionesService_BajaSolicitud,
      callback);
};


/**
 * @param {!proto.donaciones.BajaSolicitudRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.donaciones.Respuesta>}
 *     Promise that resolves to the response
 */
proto.donaciones.DonacionesServicePromiseClient.prototype.bajaSolicitud =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/donaciones.DonacionesService/BajaSolicitud',
      request,
      metadata || {},
      methodDescriptor_DonacionesService_BajaSolicitud);
};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.donaciones.EventosServiceClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.donaciones.EventosServicePromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.donaciones.EventoRequest,
 *   !proto.donaciones.Respuesta>}
 */
const methodDescriptor_EventosService_PublicarEvento = new grpc.web.MethodDescriptor(
  '/donaciones.EventosService/PublicarEvento',
  grpc.web.MethodType.UNARY,
  proto.donaciones.EventoRequest,
  proto.donaciones.Respuesta,
  /**
   * @param {!proto.donaciones.EventoRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.donaciones.Respuesta.deserializeBinary
);


/**
 * @param {!proto.donaciones.EventoRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.donaciones.Respuesta)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.donaciones.Respuesta>|undefined}
 *     The XHR Node Readable Stream
 */
proto.donaciones.EventosServiceClient.prototype.publicarEvento =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/donaciones.EventosService/PublicarEvento',
      request,
      metadata || {},
      methodDescriptor_EventosService_PublicarEvento,
      callback);
};


/**
 * @param {!proto.donaciones.EventoRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.donaciones.Respuesta>}
 *     Promise that resolves to the response
 */
proto.donaciones.EventosServicePromiseClient.prototype.publicarEvento =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/donaciones.EventosService/PublicarEvento',
      request,
      metadata || {},
      methodDescriptor_EventosService_PublicarEvento);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.donaciones.BajaEventoRequest,
 *   !proto.donaciones.Respuesta>}
 */
const methodDescriptor_EventosService_BajaEvento = new grpc.web.MethodDescriptor(
  '/donaciones.EventosService/BajaEvento',
  grpc.web.MethodType.UNARY,
  proto.donaciones.BajaEventoRequest,
  proto.donaciones.Respuesta,
  /**
   * @param {!proto.donaciones.BajaEventoRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.donaciones.Respuesta.deserializeBinary
);


/**
 * @param {!proto.donaciones.BajaEventoRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.donaciones.Respuesta)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.donaciones.Respuesta>|undefined}
 *     The XHR Node Readable Stream
 */
proto.donaciones.EventosServiceClient.prototype.bajaEvento =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/donaciones.EventosService/BajaEvento',
      request,
      metadata || {},
      methodDescriptor_EventosService_BajaEvento,
      callback);
};


/**
 * @param {!proto.donaciones.BajaEventoRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.donaciones.Respuesta>}
 *     Promise that resolves to the response
 */
proto.donaciones.EventosServicePromiseClient.prototype.bajaEvento =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/donaciones.EventosService/BajaEvento',
      request,
      metadata || {},
      methodDescriptor_EventosService_BajaEvento);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.donaciones.AdhesionRequest,
 *   !proto.donaciones.Respuesta>}
 */
const methodDescriptor_EventosService_NotificarAdhesion = new grpc.web.MethodDescriptor(
  '/donaciones.EventosService/NotificarAdhesion',
  grpc.web.MethodType.UNARY,
  proto.donaciones.AdhesionRequest,
  proto.donaciones.Respuesta,
  /**
   * @param {!proto.donaciones.AdhesionRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.donaciones.Respuesta.deserializeBinary
);


/**
 * @param {!proto.donaciones.AdhesionRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.donaciones.Respuesta)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.donaciones.Respuesta>|undefined}
 *     The XHR Node Readable Stream
 */
proto.donaciones.EventosServiceClient.prototype.notificarAdhesion =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/donaciones.EventosService/NotificarAdhesion',
      request,
      metadata || {},
      methodDescriptor_EventosService_NotificarAdhesion,
      callback);
};


/**
 * @param {!proto.donaciones.AdhesionRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.donaciones.Respuesta>}
 *     Promise that resolves to the response
 */
proto.donaciones.EventosServicePromiseClient.prototype.notificarAdhesion =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/donaciones.EventosService/NotificarAdhesion',
      request,
      metadata || {},
      methodDescriptor_EventosService_NotificarAdhesion);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.donaciones.Vacio,
 *   !proto.donaciones.ListaEventosResponse>}
 */
const methodDescriptor_EventosService_ListarEventosExternos = new grpc.web.MethodDescriptor(
  '/donaciones.EventosService/ListarEventosExternos',
  grpc.web.MethodType.UNARY,
  proto.donaciones.Vacio,
  proto.donaciones.ListaEventosResponse,
  /**
   * @param {!proto.donaciones.Vacio} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.donaciones.ListaEventosResponse.deserializeBinary
);


/**
 * @param {!proto.donaciones.Vacio} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.donaciones.ListaEventosResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.donaciones.ListaEventosResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.donaciones.EventosServiceClient.prototype.listarEventosExternos =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/donaciones.EventosService/ListarEventosExternos',
      request,
      metadata || {},
      methodDescriptor_EventosService_ListarEventosExternos,
      callback);
};


/**
 * @param {!proto.donaciones.Vacio} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.donaciones.ListaEventosResponse>}
 *     Promise that resolves to the response
 */
proto.donaciones.EventosServicePromiseClient.prototype.listarEventosExternos =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/donaciones.EventosService/ListarEventosExternos',
      request,
      metadata || {},
      methodDescriptor_EventosService_ListarEventosExternos);
};


module.exports = proto.donaciones;

